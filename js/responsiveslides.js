!function(D,O,W){D.fn.responsiveSlides=function(F){var M=D.extend({auto:!0,speed:500,timeout:4e3,pager:!1,nav:!1,random:!1,pause:!1,pauseControls:!0,prevText:"Previous",nextText:"Next",maxwidth:"",navContainer:"",manualControls:"",namespace:"rslides",before:D.noop,after:D.noop},F);return this.each(function(){W++;var e,o,t,i,n,a,s=D(this),r=0,l=s.children(),u=l.length,c=parseFloat(M.speed),f=parseFloat(M.timeout),d=parseFloat(M.maxwidth),p=M.namespace,h=p+W,v=p+"_nav "+h+"_nav",m=p+"_here",C=h+"_on",x=h+"_s",b=D("<ul class='"+p+"_tabs "+h+"_tabs' />"),y={float:"left",position:"relative",opacity:1,zIndex:2},g={float:"none",position:"absolute",opacity:0,zIndex:1},w=function(){var t,n=(document.body||document.documentElement).style,a="transition";if("string"==typeof n[a])return!0;for(e=["Moz","Webkit","Khtml","O","ms"],a=a.charAt(0).toUpperCase()+a.substr(1),t=0;t<e.length;t++)if("string"==typeof n[e[t]+a])return!0;return!1}(),_=function(t){M.before(t),w?(l.removeClass(C).css(g).eq(t).addClass(C).css(y),r=t,setTimeout(function(){M.after(t)},c)):l.stop().fadeOut(c,function(){D(this).removeClass(C).css(g).css("opacity",1)}).eq(t).fadeIn(c,function(){D(this).addClass(C).css(y),M.after(t),r=t})};if(M.random&&(l.sort(function(){return Math.round(Math.random())-.5}),s.empty().append(l)),l.each(function(t){this.id=x+t}),s.addClass(p+" "+h),F&&F.maxwidth&&s.css("max-width",d),l.hide().css(g).eq(0).addClass(C).css(y).show(),w&&l.show().css({"-webkit-transition":"opacity "+c+"ms ease-in-out","-moz-transition":"opacity "+c+"ms ease-in-out","-o-transition":"opacity "+c+"ms ease-in-out",transition:"opacity "+c+"ms ease-in-out"}),1<l.length){if(f<c+100)return;if(M.pager&&!M.manualControls){var I=[];l.each(function(t){var n=t+1;I+="<li><a href='#' class='"+x+n+"'>"+n+"</a></li>"}),b.append(I),F.navContainer?D(M.navContainer).append(b):s.after(b)}if(M.manualControls&&(b=D(M.manualControls)).addClass(p+"_tabs "+h+"_tabs"),(M.pager||M.manualControls)&&b.find("li").each(function(t){D(this).addClass(x+(t+1))}),(M.pager||M.manualControls)&&(a=b.find("a"),o=function(t){a.closest("li").removeClass(m).eq(t).addClass(m)}),M.auto&&(t=function(){n=setInterval(function(){l.stop(!0,!0);var t=r+1<u?r+1:0;(M.pager||M.manualControls)&&o(t),_(t)},f)})(),i=function(){M.auto&&(clearInterval(n),t())},M.pause&&s.hover(function(){clearInterval(n)},function(){i()}),(M.pager||M.manualControls)&&(a.bind("click",function(t){t.preventDefault(),M.pauseControls||i();var n=a.index(this);r===n||D("."+C).queue("fx").length||(o(n),_(n))}).eq(0).closest("li").addClass(m),M.pauseControls&&a.hover(function(){clearInterval(n)},function(){i()})),M.nav){var q="<a href='#' class='"+v+" prev'>"+M.prevText+"</a><a href='#' class='"+v+" next'>"+M.nextText+"</a>";F.navContainer?D(M.navContainer).append(q):s.after(q);var z=D("."+h+"_nav"),T=z.filter(".prev");z.bind("click",function(t){t.preventDefault();var n=D("."+C);if(!n.queue("fx").length){var a=l.index(n),e=a-1,s=a+1<u?r+1:0;_(D(this)[0]===T[0]?e:s),(M.pager||M.manualControls)&&o(D(this)[0]===T[0]?e:s),M.pauseControls||i()}}),M.pauseControls&&z.hover(function(){clearInterval(n)},function(){i()})}}if(void 0===document.body.style.maxWidth&&F.maxwidth){var k=function(){s.css("width","100%"),s.width()>d&&s.css("width",d)};k(),D(O).bind("resize",function(){k()})}})}}(jQuery,this,0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
